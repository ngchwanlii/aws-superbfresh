"""
Django settings for superbfresh project.

Generated by 'django-admin startproject' using Django 2.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG')

BASE_HOST = os.environ.get('BASE_HOST')
BASE_SCHEME = os.environ.get('BASE_SCHEME')
BASE_URL = "{BASE_SCHEME}://{BASE_HOST}".format(
    BASE_SCHEME=BASE_SCHEME,
    BASE_HOST=BASE_HOST,
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.environ.get('STATIC_ROOT')

ALLOWED_HOSTS = [
    '*',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'tinymce',
    'storages',
    'apps.user',
    'apps.goods',
    'apps.order',
    'apps.cart',
    'apps.webhooks',
    'apps.search',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'superbfresh.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': {
                'utils-float': 'templatetags.get_float',
                'utils-absolute-url': 'templatetags.absolute_url',
            }
        },
    },
]

WSGI_APPLICATION = 'superbfresh.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get('RDS_DB_NAME'),
        'USER': os.environ.get('RDS_USERNAME'),
        'PASSWORD': os.environ.get('RDS_PASSWORD'),
        'HOST': os.environ.get('RDS_HOSTNAME'),
        'PORT': os.environ.get('RDS_PORT'),
    }
}

# Redis Cluster Cache
REDIS_PORT = os.environ.get('REDIS_PORT')
REDIS_ENDPOINT = os.environ.get('REDIS_ENDPOINT')
# For tcp connection (ssl use rediss://{ENDPOINT}:{PORT}/)
REDIS_BROKER_LOCATION = "redis://{ENDPOINT}:{PORT}".format(ENDPOINT=REDIS_ENDPOINT, PORT=REDIS_PORT)

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_BROKER_LOCATION,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators
AUTH_USER_MODEL = 'user.User'
# default is /accounts/login?next=/user, we use our customized login view
LOGIN_URL = '/user/login'
# allow inactive user to login with authenticate(), then perform logic check in LoginView
AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.AllowAllUsersModelBackend']

SALT = os.environ.get('SALT')

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Email settings (through Amazon SES)
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
AWS_SES_EMAIL_PORT = os.environ.get('AWS_SES_EMAIL_PORT')
AWS_SES_REGION_ENDPOINT = os.environ.get('AWS_SES_REGION_ENDPOINT')
# SES smtp username
AWS_SES_ACCESS_KEY_ID = os.environ.get('AWS_SES_ACCESS_KEY_ID')
# SES smtp pass
AWS_SES_SECRET_ACCESS_KEY = os.environ.get('AWS_SES_SECRET_ACCESS_KEY')

# tinymce editor config
TINYMCE_DEFAULT_CONFIG = {
    'plugins': "table,spellchecker,paste,searchreplace",
    'theme': "advanced",
    'cleanup_on_startup': True,
    'custom_undo_redo_levels': 10,
}

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Amazon S3 file storage settings
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

AWS_ACCESS_KEY_ID = None  # By setting to None, Boto3 will detect your IAM role who has permission to access S3
AWS_SECRET_ACCESS_KEY = None  # By setting to None, Boto3 will detect your IAM role who has permission to access S3
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
AWS_S3_FILE_OVERWRITE = False
AWS_IS_GZIPPED = True  # for quicker delivery
AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME')
AWS_QUERYSTRING_AUTH = False
AWS_DEFAULT_ACL = 'None'
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=31536000',
}

# Stripe API Key
STRIPE_API_KEY = os.environ.get('STRIPE_SK_TEST')
STRIPE_WEBHOOK_ENDPOINT_SK = os.environ.get('STRIPE_WEBHOOK_ENDPOINT_SK')

# Settings for Amazon ElasticSearch
AWS_ES_ENDPOINT = os.environ.get('AWS_ES_ENDPOINT')
AWS_ES_REGION = os.environ.get('AWS_S3_REGION_NAME')
AWS_ES_PORT = os.environ.get('AWS_ES_PORT')
